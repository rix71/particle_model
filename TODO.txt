Updated: Wed Jan 18 01:23:19 PM EET 2023
code/datetime.f90-67-  type(t_datetime) function ctor_datetime(date_str) result(res)
code/datetime.f90-68-    !---------------------------------------------
code/datetime.f90-69-    ! Constructor for datetime
code/datetime.f90:70:    ! TODO: Date validation
code/datetime.f90-71-    !---------------------------------------------
code/datetime.f90-72-    character(len=LEN_CHAR_S), intent(in) :: date_str
code/datetime.f90-73-    integer                       :: year, month, day
--
code/datetime.f90-168-    !---------------------------------------------
code/datetime.f90-169-    ! Update the date
code/datetime.f90-170-    ! Timestep must be in seconds
code/datetime.f90:171:    ! TODO: Backwards update
code/datetime.f90-172-    !---------------------------------------------
code/datetime.f90-173-
code/datetime.f90-174-    class(t_datetime), intent(inout) :: this
--
code/datetime.f90-222-    ! Changes the second number in daysInMonth to 29
code/datetime.f90-223-    ! if the year is a leap year.
code/datetime.f90-224-    ! daysInMonth then stays like this, so it must be reset
code/datetime.f90:225:    ! TODO: Make into pure function or something so won't have to reset
code/datetime.f90-226-    !---------------------------------------------
code/datetime.f90-227-
code/datetime.f90-228-    class(t_datetime), intent(in) :: this
--
code/datetime.f90-288-  real(rk) function date_diff(start, end)
code/datetime.f90-289-    !---------------------------------------------
code/datetime.f90-290-    ! Gives the difference between two dates in seconds
code/datetime.f90:291:    ! TODO: - operator?
code/datetime.f90-292-    !---------------------------------------------
code/datetime.f90-293-    type(t_datetime), intent(in) :: start, end
code/datetime.f90-294-    real(rk)                     :: start_num, end_num
--
code/domain.f90-87-    call nc_read_real_2d(trim(TOPOFILE), trim(bathy), nx, ny, d%depdata)
code/domain.f90-88-
code/domain.f90-89-    !---------------------------------------------
code/domain.f90:90:    ! TODO: Seamask could have another value (4) to represent boundaries.
code/domain.f90-91-    !       Boundary should have a thickness!
code/domain.f90-92-    FMT2, "Making seamask"
code/domain.f90-93-    do ii = 2, nx - 1
--
code/fieldset.f90-494-    ! Get a list of directories or files that contain the data
code/fieldset.f90-495-    ! The files should be named so that ls command would give them
code/fieldset.f90-496-    ! in the right order. Including the date in the file name should be enough.
code/fieldset.f90:497:    ! TODO: Alternatively, if all the files are in one directory,
code/fieldset.f90-498-    !       it should list all the files in this%PATH.
code/fieldset.f90-499-    !       (separate routine e.g., init_filelist ?)
code/fieldset.f90:500:    ! TODO (later, probably never): sort the files somehow so all of this
code/fieldset.f90-501-    !       would not depend on ls getting it right.
code/fieldset.f90-502-    !---------------------------------------------
code/fieldset.f90-503-    class(t_fieldset), intent(inout) :: this
--
code/fieldset.f90-554-  subroutine init_proc_mask(this)
code/fieldset.f90-555-    !---------------------------------------------
code/fieldset.f90-556-    ! This maps the pieces of GETM data using par_setup.
code/fieldset.f90:557:    ! TODO: Since pmask takes up a lot of unnecessary space,
code/fieldset.f90-558-    !       maybe this should only be called when par_setup is wanted
code/fieldset.f90-559-    !      (either a compilation flag or "if (parallel)" or something in init_model)
code/fieldset.f90-560-    ! EDIT: This is called from init_model only if this%has_subdomains=.true.
--
code/fieldset.f90-630-  !===========================================
code/fieldset.f90-631-  subroutine find_folder(this, date, thedir, folder_idx)
code/fieldset.f90-632-    !---------------------------------------------
code/fieldset.f90:633:    ! TODO: might have to check if nc files start at time
code/fieldset.f90-634-    ! [date] 00:00:00 or [date] 00:00:10 (at least in this particular example)
code/fieldset.f90-635-    ! Compare every time?
code/fieldset.f90-636-    ! Some validity check would be nice
--
code/init.f90-169-  subroutine init_fieldset
code/init.f90-170-    !---------------------------------------------
code/init.f90-171-    ! Allocate arrays for current data.
code/init.f90:172:    ! TODO: Right now it is assumed that all subdomains
code/init.f90-173-    !       are the same size. Also it is assumed that subdomains
code/init.f90-174-    !       exist at all. There should be a switch (e.g. has_subdomains).
code/init.f90-175-    !       This also changes allocation.
--
code/init.f90-246-
code/init.f90-247-      if (nc_var_exists(trim(filename), trim(elevvarname))) then
code/init.f90-248-        call fieldset%add_field("ELEV", elevvarname, is_2d=.true.)
code/init.f90:249:        ! TODO: set_elev for faster lookup
code/init.f90-250-        field_count = field_count + 1
code/init.f90-251-      end if
code/init.f90-252-    end if
--
code/interp.f90-46-    !      c_k
code/interp.f90-47-    !        1 - bottom point along y-axis
code/interp.f90-48-    !        2 - top point along y-axis
code/interp.f90:49:    ! TODO: Maybe calculate dx, dy and dz for each edge?
code/interp.f90-50-    !---------------------------------------------
code/interp.f90-51-
code/interp.f90-52-    real(rk), intent(in)  :: x1, x2
--
code/loop.f90-133-        !---------------------------------------------
code/loop.f90-134-        ! Write snapshot
code/loop.f90-135-        ! Cannot use this with openMP
code/loop.f90:136:        ! TODO: parallel i/o
code/loop.f90-137-        if ((mod(particles(ipart)%age, snap_interval) == 0) .and. (write_snapshot)) then
code/loop.f90-138-          call write_data_snapshot(particles(ipart), ipart)
code/loop.f90-139-        end if
--
code/main.f90-7-  use run_params, only: runid
code/main.f90-8-#endif
code/main.f90-9-  use run_params, only: dry_run, nmlfilename
code/main.f90:10:! TODO: General biofouling flag
code/main.f90-11-#if (defined(BIOFOULING_KOOI) || defined(BIOFOULING_TSIARAS) || defined(BIOFOULING_SIMPLE))
code/main.f90-12-  use run_params, only: biofouling_nmlfilename
code/main.f90-13-#endif
--
code/output.f90-326-  subroutine write_data(nwrite)
code/output.f90-327-    !---------------------------------------------
code/output.f90-328-    ! Write the output
code/output.f90:329:    ! TODO: selection for output
code/output.f90-330-    !---------------------------------------------
code/output.f90-331-
code/output.f90-332-    integer, intent(in) :: nwrite
--
code/output.f90-840-  subroutine write_restart(nwrite)
code/output.f90-841-    ! ---------------------------------------
code/output.f90-842-    ! Write restart file
code/output.f90:843:    ! TODO: this should be a method of the particle (array) class
code/output.f90-844-    ! ---------------------------------------
code/output.f90-845-    integer, intent(in) :: nwrite
code/output.f90-846-    character(len=LEN_CHAR_L) :: restart_file
--
code/particle.f90-254-  !===========================================
code/particle.f90-255-  subroutine check_depth(this, fieldset, t)
code/particle.f90-256-    !---------------------------------------------
code/particle.f90:257:    ! TODO: Interpolation for bathymetry?
code/particle.f90-258-    !---------------------------------------------
code/particle.f90-259-
code/particle.f90-260-    class(t_particle), intent(inout) :: this
--
code/particle.f90-768-  ! This module includes variables related to particles:
code/particle.f90-769-  ! - number of particles, initial locations or something (maybe)...
code/particle.f90-770-  ! - anything else?
code/particle.f90:771:  ! TODO: Initial coordinates from netCDF
code/particle.f90-772-  !----------------------------------------------------------------
code/particle.f90-773-  use mod_precdefs
code/particle.f90-774-  use mod_errors
--
code/physics.f90-6-module mod_physics
code/physics.f90-7-  !----------------------------------------------------------------
code/physics.f90-8-  ! This module contains functions to calculate physical parameters
code/physics.f90:9:  ! TODO:
code/physics.f90-10-  ! - drag
code/physics.f90-11-  !----------------------------------------------------------------
code/physics.f90-12-  use mod_errors
--
code/physics.f90-208-  real(rk) function seawater_viscosity_from_temp_and_salt(T, S)
code/physics.f90-209-    !---------------------------------------------
code/physics.f90-210-    ! Dynamic viscosity of seawater
code/physics.f90:211:    ! TODO: Add proper reference
code/physics.f90-212-    ! https://ittc.info/media/4048/75-02-01-03.pdf
code/physics.f90-213-    !---------------------------------------------
code/physics.f90-214-    real(rk), intent(in) :: T, S
--
code/vars.f90-17-module mod_params
code/vars.f90-18-  !----------------------------------------------------------------
code/vars.f90-19-  ! This includes the model parameters/constants
code/vars.f90:20:  ! TODO (later): Diffusion? Biofouling? ...?
code/vars.f90-21-  !   viscosity and density defaults in namelist?
code/vars.f90-22-  !----------------------------------------------------------------
code/vars.f90-23-  use mod_precdefs
--
code/vars.f90-84-  use mod_fieldset
code/vars.f90-85-
code/vars.f90-86-  logical                   :: has_subdomains, &               ! Is the data in multiple files (true) or one file (false)?
code/vars.f90:87:                               has_bottom_stress               ! TODO: bottom_stress_method
code/vars.f90-88-  integer                   :: nlevels, &
code/vars.f90-89-                               zax_style, &                    ! Depth values (1) or layer thickness (2)
code/vars.f90-90-                               zax_direction, &                ! > 0 - positive up, < 0 - positive down
--
code/vertical_motion.f90-42-    !---------------------------------------------
code/vertical_motion.f90-43-    ! Gives a settled particle vertical velocity if
code/vertical_motion.f90-44-    ! the bottom friction velocity exceeds a certain threshold
code/vertical_motion.f90:45:    ! TODO: currently, resuspension_threshold is a namelist parameter,
code/vertical_motion.f90-46-    ! perhaps should be calculated as the particles' critical flow velocity.
code/vertical_motion.f90-47-    ! Ref: Erosion Behavior of Different Microplastic Particles in Comparison to Natural Sediments
code/vertical_motion.f90-48-    !       Kryss Waldschläger and Holger Schüttrumpf
--
code/vertical_motion.f90-79-  real(rk) function buoyancy(p, fieldset, time, delta_rho, kin_visc) result(res)
code/vertical_motion.f90-80-    !---------------------------------------------
code/vertical_motion.f90-81-    ! Calculate the vertical velocity due to buoyancy
code/vertical_motion.f90:82:    ! TODO: Which timestep should be used? (original or t + dt?)
code/vertical_motion.f90-83-    !---------------------------------------------
code/vertical_motion.f90-84-    type(t_particle), intent(in)    :: p
code/vertical_motion.f90-85-    type(t_fieldset), intent(in)    :: fieldset
